#!/bin/bash
### BEGIN INIT INFO
# Provides:          liferay
# Required-Start:    $local_fs $remote_fs $network
# Required-Stop:     $local_fs $remote_fs $network
# Should-Start:      $named
# Should-Stop:       $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Liferay portal daemon.
# Description:       Starts the Liferay portal.
# Author:            Julien Rialland <julien.rialland@gmail.com>
# Author:            Orin Fink <orin.fink@thirdwavellc.com>
### END INIT INFO

#Display name of the application
APP_NAME="Liferay"

#Location of Liferay installation
export LIFERAY_HOME=<%= @liferay_home %>

#unprivileged user that runs the daemon. The group/user should have been created separately,
#using groupadd/useradd
USER=<%= @user %>
GROUP=<%= @group %>

###This is end of the configurable section for most cases, other variable definitions follow :

#Only root user may run this script
if [ `id -u` -ne 0 ]; then
    echo "You need root privileges to run this script"
    exit 1
fi

#tomcat directory
#detection of the tomcat directory within liferay
TOMCAT_DIR=tomcat
export CATALINA_HOME="$LIFERAY_HOME/$TOMCAT_DIR"

#location of pid file
export CATALINA_PID=/var/run/liferay.pid

export JAVA_HOME=<%= node['java']['java_home'] %>

#extra jvm configuration : enable jmx
#export JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"

#extra jvm configuration : enable remote debugging
#export JAVA_OPTS="$JAVA_OPTS -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9998" 

################################################################################

#verify that the user that will run the daemon exists
id "$USER" > /dev/null 2>&1
if [ "$?" -ne "0" ]; then
    echo "User $user does not exist !"
    exit 1
fi

#load utility functions from Linux Standard Base
<% case node['platform_family'] %>
<% when "debian" %> 
. /lib/lsb/init-functions
<% when "rhel" %>
. /etc/init.d/functions
<% end %>

#starts the daemon service
function start {
    <% case node['platform_family'] %>
    <% when "debian" %>
        log_daemon_msg "Starting $APP_NAME"
    <% when "rhel" %>
        echo "Starting $APP_NAME"
    <% end %>

        #create work directory if non-existent
        mkdir $CATALINA_HOME/work 2>/dev/null

        #clear temp directory
        rm -rf "$CATALINA_HOME/temp/*" 2>/dev/null
        mkdir $CATALINA_HOME/temp 2>/dev/null

        #fix user rights on liferay home dir
        chown -R "$GROUP":"$USER" "$LIFERAY_HOME"
        chmod -R ug=rwx "$LIFERAY_HOME"

        #ensure that pid file is writeable
        touch "$CATALINA_PID" 2>/dev/null
        chmod ugo=rw "$CATALINA_PID"

        su "$USER" -c "$CATALINA_HOME/bin/catalina.sh start"
        status=$?
    
    <% case node['platform_family'] %>
    <% when "debian" %>
        log_end_msg $status
    <% end %>

        exit $status
}

#stops the daemon service
function stop {
    <% case node['platform_family'] %>
    <% when "debian" %>
        echo "Stopping $APP_NAME"
    <% when "rhel" %>
        echo "Stopping $APP_NAME"
    <% end %>

        if [ ! -f "$CATALINA_PID" ];then
            echo "file $CATALINA_PID is missing !"
            unset CATALINA_PID
        fi
        su "$USER" -c "$CATALINA_HOME/bin/catalina.sh stop 15"
        status=$?

    <% case node['platform_family'] %>
    <% when "debian" %>
        log_end_msg $status
    <% end %>

        if [ "$status" = "0" ];then
            rm -f "$CATALINA_PID"
        fi
        exit $status
}

#restarts the daemon service
function restart {
        stop
        sleep 3s
        start
}

#prints service status
function status {
  if [ -f "$CATALINA_PID" ]; then
    pid=`cat "$CATALINA_PID"`
    echo "$APP_NAME is running with pid $pid"
    exit 0
  else
    echo "$APP_NAME is not running (or $CATALINA_PID is missing)"
    exit 1
  fi
}

case "$1" in
    start|stop|restart|status)
        $1
    ;;
    *)
        echo $"Usage: $0 {start|stop|restart|status}"
        exit 1
    ;;
esac
